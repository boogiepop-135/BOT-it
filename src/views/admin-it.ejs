<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Panel de Administración - IT - San Cosme Orgánico</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
  <style>
    :root {
      --primary: #2563eb;
      --secondary: #7c3aed;
    }
    .nav-item.active {
      background-color: rgba(37, 99, 235, 0.1);
      color: var(--primary);
      border-left: 3px solid var(--primary);
    }
    .badge { display: inline-block; padding: 0.25rem 0.75rem; border-radius: 0.375rem; font-size: 0.875rem; font-weight: 500; }
    .badge-open { background-color: #eff6ff; color: #2563eb; }
    .badge-assigned { background-color: #fef3c7; color: #d97706; }
    .badge-in-progress { background-color: #dbeafe; color: #1e40af; }
    .badge-resolved { background-color: #d1fae5; color: #065f46; }
    .badge-closed { background-color: #f3f4f6; color: #374151; }
    .badge-urgent { background-color: #fef2f2; color: #dc2626; }
    .badge-high { background-color: #fff7ed; color: #ea580c; }
    .badge-medium { background-color: #fefce8; color: #ca8a04; }
    .badge-low { background-color: #f0fdf4; color: #16a34a; }
  </style>
</head>
<body class="bg-gray-50">
  <!-- Sidebar -->
  <aside class="fixed h-full w-64 bg-white shadow-lg">
    <div class="p-6 border-b">
      <div class="flex items-center space-x-3">
        <div class="w-10 h-10 rounded-lg bg-blue-600 flex items-center justify-center">
          <i class="fas fa-network-wired text-white text-xl"></i>
        </div>
        <div>
          <h1 class="text-lg font-bold text-gray-800">San Cosme IT</h1>
          <p class="text-xs text-gray-500">Panel de Control</p>
        </div>
      </div>
    </div>
    
    <nav class="p-4 space-y-1">
      <a href="#" data-section="dashboard" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-tachometer-alt w-5"></i>
        <span>Dashboard</span>
      </a>
      <a href="#" data-section="tickets" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-ticket-alt w-5"></i>
        <span>Tickets</span>
      </a>
      <a href="#" data-section="projects" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-project-diagram w-5"></i>
        <span>Proyectos</span>
      </a>
      <a href="#" data-section="users" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-users w-5"></i>
        <span>Usuarios</span>
      </a>
      <a href="#" data-section="groups" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-user-friends w-5"></i>
        <span>Grupos</span>
      </a>
      <a href="#" data-section="reminders" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-bell w-5"></i>
        <span>Recordatorios</span>
      </a>
      <a href="#" data-section="reports" class="nav-item flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-gray-100 transition">
        <i class="fas fa-chart-bar w-5"></i>
        <span>Reportes</span>
      </a>
    </nav>
    
    <div class="absolute bottom-0 w-full p-4 border-t bg-white">
      <button onclick="openQRModal()" id="whatsapp-btn-sidebar" class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition flex items-center justify-center mb-3">
        <i class="fas fa-mobile-alt mr-2"></i>
        <span id="whatsapp-btn-text-sidebar">Vincular WhatsApp</span>
      </button>
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-2">
          <div class="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white">
            <i class="fas fa-user"></i>
          </div>
          <span id="username" class="text-sm font-medium text-gray-700">Admin</span>
        </div>
        <button id="logout" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-sign-out-alt"></i>
        </button>
      </div>
    </div>
  </aside>

  <!-- Main Content -->
  <main class="ml-64 p-6">
    <!-- Dashboard Section -->
    <div id="dashboard-section" class="section-content">
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center space-x-4">
          <h2 class="text-2xl font-bold text-gray-800">Dashboard IT</h2>
          <button id="bot-control-btn" onclick="toggleBotStatus()" class="px-4 py-2 rounded-lg font-medium transition flex items-center">
            <i class="fas fa-pause mr-2"></i>
            <span id="bot-control-text">Pausar Bot</span>
          </button>
        </div>
        <button onclick="openQRModal()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition flex items-center">
          <i class="fas fa-mobile-alt mr-2"></i>
          <span>Vincular WhatsApp</span>
        </button>
      </div>
      
      <!-- Stats Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Total Tickets</p>
              <p id="stat-total-tickets" class="text-3xl font-bold text-gray-800">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center">
              <i class="fas fa-ticket-alt text-blue-600"></i>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Tickets Abiertos</p>
              <p id="stat-open-tickets" class="text-3xl font-bold text-orange-600">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-orange-100 flex items-center justify-center">
              <i class="fas fa-exclamation-circle text-orange-600"></i>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Proyectos Activos</p>
              <p id="stat-active-projects" class="text-3xl font-bold text-purple-600">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center">
              <i class="fas fa-project-diagram text-purple-600"></i>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Tiempo Resolución</p>
              <p id="stat-avg-resolution" class="text-3xl font-bold text-green-600">0h</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-green-100 flex items-center justify-center">
              <i class="fas fa-clock text-green-600"></i>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Charts -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Tickets por Categoría</h3>
          <canvas id="categoryChart"></canvas>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Estado de Tickets</h3>
          <canvas id="statusChart"></canvas>
        </div>
      </div>
      
      <!-- Recent Tickets -->
      <div class="mt-6 bg-white rounded-lg shadow">
        <div class="p-6 border-b">
          <h3 class="text-lg font-semibold text-gray-800">Tickets Recientes</h3>
        </div>
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Título</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Prioridad</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Fecha</th>
              </tr>
            </thead>
            <tbody id="recent-tickets" class="divide-y divide-gray-200">
              <!-- Tickets will be loaded here -->
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Groups Section -->
    <div id="groups-section" class="section-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Grupos de WhatsApp</h2>
        <div class="flex items-center space-x-2">
          <input id="groups-search" type="text" placeholder="Buscar grupo..." class="border border-gray-300 rounded-lg px-3 py-2" oninput="debouncedLoadGroups()" />
          <button onclick="promptSendToGroupByName()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg">
            <i class="fas fa-paper-plane mr-2"></i>Enviar por nombre
          </button>
          <button onclick="loadGroups()" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-lg">
            <i class="fas fa-sync mr-2"></i>Actualizar
          </button>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow overflow-hidden">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Nombre</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Group ID</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Miembros</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Acciones</th>
            </tr>
          </thead>
          <tbody id="groups-table" class="divide-y divide-gray-200">
          </tbody>
        </table>
      </div>
    </div>

    <!-- Tickets Section -->
    <div id="tickets-section" class="section-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Gestión de Tickets</h2>
        <button onclick="openNewTicketModal()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg">
          <i class="fas fa-plus mr-2"></i>Nuevo Ticket
        </button>
      </div>
      
      <!-- Filters -->
      <div class="bg-white rounded-lg shadow p-4 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
          <select id="filter-sucursal" class="border border-gray-300 rounded-lg px-4 py-2">
            <option value="">Todas las sucursales</option>
            <option value="lomas">Lomas</option>
            <option value="decathlon">Decathlon</option>
            <option value="centro-sur">Centro Sur</option>
            <option value="ninguna">General</option>
          </select>
          
          <select id="filter-status" class="border border-gray-300 rounded-lg px-4 py-2">
            <option value="">Todos los estados</option>
            <option value="open">Abierto</option>
            <option value="assigned">Asignado</option>
            <option value="in_progress">En Progreso</option>
            <option value="resolved">Resuelto</option>
            <option value="closed">Cerrado</option>
          </select>
          
          <select id="filter-priority" class="border border-gray-300 rounded-lg px-4 py-2">
            <option value="">Todas las prioridades</option>
            <option value="urgent">Urgente</option>
            <option value="high">Alta</option>
            <option value="medium">Media</option>
            <option value="low">Baja</option>
          </select>
          
          <select id="filter-category" class="border border-gray-300 rounded-lg px-4 py-2">
            <option value="">Todas las categorías</option>
            <option value="hardware">Hardware</option>
            <option value="software">Software</option>
            <option value="network">Red</option>
            <option value="security">Seguridad</option>
            <option value="m365">Microsoft 365</option>
            <option value="pos">POS</option>
            <option value="backup">Backup</option>
            <option value="other">Otro</option>
          </select>
          
          <button onclick="applyTicketFilters()" class="bg-gray-800 hover:bg-gray-700 text-white px-4 py-2 rounded-lg">
            <i class="fas fa-filter mr-2"></i>Filtrar
          </button>
        </div>
      </div>
      
      <!-- Tickets Table -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">ID</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Título</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Sucursal</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Categoría</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Prioridad</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Acciones</th>
            </tr>
          </thead>
          <tbody id="tickets-table" class="divide-y divide-gray-200">
            <!-- Tickets will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Projects Section -->
    <div id="projects-section" class="section-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Proyectos IT</h2>
        <button onclick="openNewProjectModal()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg">
          <i class="fas fa-plus mr-2"></i>Nuevo Proyecto
        </button>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="projects-grid">
        <!-- Projects will be loaded here -->
      </div>
    </div>

    <!-- Users Section -->
    <div id="users-section" class="section-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Usuarios del Bot</h2>
        <div class="flex items-center space-x-4">
          <input type="text" id="user-search" placeholder="Buscar usuario..." class="border border-gray-300 rounded-lg px-4 py-2">
        </div>
      </div>
      
      <!-- Stats -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Total Usuarios</p>
              <p id="stat-total-users" class="text-3xl font-bold text-gray-800">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center">
              <i class="fas fa-users text-blue-600"></i>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Activos Hoy</p>
              <p id="stat-active-today" class="text-3xl font-bold text-green-600">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-green-100 flex items-center justify-center">
              <i class="fas fa-user-check text-green-600"></i>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Nuevos</p>
              <p id="stat-new-users" class="text-3xl font-bold text-yellow-600">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-yellow-100 flex items-center justify-center">
              <i class="fas fa-user-plus text-yellow-600"></i>
            </div>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-600">Pausados</p>
              <p id="stat-paused-users" class="text-3xl font-bold text-orange-600">0</p>
            </div>
            <div class="w-12 h-12 rounded-full bg-orange-100 flex items-center justify-center">
              <i class="fas fa-user-slash text-orange-600"></i>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Users Table -->
      <div class="bg-white rounded-lg shadow overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usuario</th>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Teléfono</th>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mensajes</th>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden lg:table-cell">Última Interacción</th>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
              <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider whitespace-nowrap" style="min-width: 240px;">Acciones</th>
            </tr>
          </thead>
          <tbody id="users-table" class="bg-white divide-y divide-gray-200">
            <!-- Users will be loaded here -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Reminders Section -->
    <div id="reminders-section" class="section-content hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-800">Recordatorios de Pago</h2>
        <button onclick="openNewReminderModal()" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-medium shadow-lg">
          <i class="fas fa-plus mr-2"></i>Nuevo Recordatorio
        </button>
      </div>

      <div class="bg-white rounded-lg shadow overflow-hidden">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Título</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Destinatario</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Monto</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Vencimiento</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Recordatorios</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Acciones</th>
            </tr>
          </thead>
          <tbody id="reminders-table" class="divide-y divide-gray-200">
          </tbody>
        </table>
      </div>
    </div>

    <!-- Reports Section -->
    <div id="reports-section" class="section-content hidden">
      <h2 class="text-2xl font-bold text-gray-800 mb-6">Reportes y Métricas</h2>
      <!-- Reports content -->
    </div>
  </main>

  <!-- Ticket Modal -->
  <div id="ticket-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg w-full max-w-2xl p-6 m-4 max-h-[90vh] overflow-y-auto">
      <h3 class="text-xl font-bold text-gray-800 mb-4" id="ticket-modal-title">Nuevo Ticket</h3>
      <form id="ticket-form">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Título</label>
            <input type="text" id="ticket-title" required class="w-full border border-gray-300 rounded-lg px-4 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
            <textarea id="ticket-description" rows="4" required class="w-full border border-gray-300 rounded-lg px-4 py-2"></textarea>
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Sucursal</label>
              <select id="ticket-sucursal" class="w-full border border-gray-300 rounded-lg px-4 py-2">
                <option value="ninguna">General</option>
                <option value="lomas">Lomas</option>
                <option value="decathlon">Decathlon</option>
                <option value="centro-sur">Centro Sur</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Categoría</label>
              <select id="ticket-category" required class="w-full border border-gray-300 rounded-lg px-4 py-2">
                <option value="hardware">Hardware</option>
                <option value="software">Software</option>
                <option value="network">Red</option>
                <option value="security">Seguridad</option>
                <option value="m365">Microsoft 365</option>
                <option value="pos">POS</option>
                <option value="backup">Backup</option>
                <option value="other">Otro</option>
              </select>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Prioridad</label>
            <select id="ticket-priority" required class="w-full border border-gray-300 rounded-lg px-4 py-2">
              <option value="low">Baja</option>
              <option value="medium" selected>Media</option>
              <option value="high">Alta</option>
              <option value="urgent">Urgente</option>
            </select>
          </div>
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeTicketModal()" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Guardar</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Reply Message Modal -->
  <div id="reply-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg w-full max-w-2xl p-6 m-4">
      <h3 class="text-xl font-bold text-gray-800 mb-4">Responder al Usuario</h3>
      <form id="reply-form">
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-1">Mensaje</label>
          <textarea id="reply-message" rows="6" required class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="Escribe tu mensaje aquí..."></textarea>
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeReplyModal()" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            <i class="fas fa-paper-plane mr-2"></i>Enviar
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Resolve Ticket Modal -->
  <div id="resolve-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg w-full max-w-2xl p-6 m-4">
      <h3 class="text-xl font-bold text-gray-800 mb-4">
        <i class="fas fa-check-circle text-green-600 mr-2"></i>Marcar Ticket como Resuelto
      </h3>
      <form id="resolve-form">
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-1">Solución (opcional)</label>
          <textarea id="resolve-solution" rows="4" class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="Describe la solución aplicada..."></textarea>
        </div>
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
          <p class="text-sm text-yellow-800">
            <i class="fas fa-info-circle mr-2"></i>
            Se enviará un mensaje automático al usuario informando que su ticket ha sido resuelto.
          </p>
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeResolveModal()" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
            <i class="fas fa-check mr-2"></i>Marcar como Resuelto
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- View Ticket Details Modal -->
  <div id="view-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg w-full max-w-3xl p-6 m-4 max-h-[90vh] overflow-y-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-bold text-gray-800" id="view-ticket-title">Detalles del Ticket</h3>
        <button onclick="closeViewModal()" class="text-gray-500 hover:text-gray-700">
          <i class="fas fa-times text-2xl"></i>
        </button>
      </div>
      
      <div id="ticket-details" class="space-y-4">
        <!-- Los detalles se cargarán aquí -->
      </div>
    </div>
  </div>

  <!-- New Project Modal -->
  <div id="project-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg w-full max-w-2xl p-6 m-4 max-h-[90vh] overflow-y-auto">
      <h3 class="text-xl font-bold text-gray-800 mb-4" id="project-modal-title">Nuevo Proyecto</h3>
      <form id="project-form">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Nombre del Proyecto *</label>
            <input type="text" id="project-name" required class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="Ej: Implementar Backup Automático">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Descripción *</label>
            <textarea id="project-description" rows="3" required class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="Describe el proyecto..."></textarea>
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Estado</label>
              <select id="project-status" class="w-full border border-gray-300 rounded-lg px-4 py-2">
                <option value="planning">Planificación</option>
                <option value="in_progress" selected>En Progreso</option>
                <option value="on_hold">En Pausa</option>
                <option value="completed">Completado</option>
                <option value="cancelled">Cancelado</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Prioridad</label>
              <select id="project-priority" class="w-full border border-gray-300 rounded-lg px-4 py-2">
                <option value="low">Baja</option>
                <option value="medium" selected>Media</option>
                <option value="high">Alta</option>
                <option value="critical">Crítica</option>
              </select>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Progreso (%)</label>
            <input type="number" id="project-progress" min="0" max="100" value="0" class="w-full border border-gray-300 rounded-lg px-4 py-2">
          </div>
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeProjectModal()" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700">
            <i class="fas fa-save mr-2"></i>Guardar Proyecto
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Payment Reminder Modal -->
  <div id="reminder-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-lg w-full max-w-2xl p-6 m-4 max-h-[90vh] overflow-y-auto">
      <h3 class="text-xl font-bold text-gray-800 mb-4" id="reminder-modal-title">Nuevo Recordatorio</h3>
      <form id="reminder-form">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Título *</label>
            <input type="text" id="reminder-title" required class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="Ej: Pago de Servicio XYZ">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
            <textarea id="reminder-description" rows="2" class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="Descripción del pago..."></textarea>
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Número de Teléfono *</label>
              <input type="text" id="reminder-phone" required class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="5214422823539">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Monto</label>
              <input type="number" id="reminder-amount" class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="1000.00">
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Fecha de Vencimiento *</label>
            <input type="date" id="reminder-due-date" required class="w-full border border-gray-300 rounded-lg px-4 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Días antes de enviar recordatorio *</label>
            <input type="text" id="reminder-days" required class="w-full border border-gray-300 rounded-lg px-4 py-2" placeholder="7, 3, 1" value="7, 3, 1">
            <p class="text-xs text-gray-500 mt-1">Separar por comas (ej: 7, 3, 1 = recordatorio a los 7, 3 y 1 días antes)</p>
          </div>
          <div class="flex items-center">
            <input type="checkbox" id="reminder-monthly" class="mr-2">
            <label for="reminder-monthly" class="text-sm text-gray-700">Recordatorio mensual recurrente</label>
          </div>
        </div>
        <div class="flex justify-end space-x-3 mt-6">
          <button type="button" onclick="closeReminderModal()" class="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition">Cancelar</button>
          <button type="submit" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition">
            <i class="fas fa-save mr-2"></i>Guardar Recordatorio
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Check authentication
    const token = localStorage.getItem('token');
    if (!token) {
      window.location.href = '/admin/login';
    }
    
    let currentTicketId = null;
    let categoryChartInstance = null;
    let statusChartInstance = null;

    // Helper function to handle auth errors
    function handleAuthError(response) {
      if (response.status === 401) {
        alert('Tu sesión ha expirado. Por favor, inicia sesión nuevamente.');
        localStorage.removeItem('token');
        window.location.href = '/admin/login';
        return true;
      }
      return false;
    }

    // Navigation
    document.querySelectorAll('.nav-item').forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        const section = e.currentTarget.dataset.section;
        showSection(section);
        document.querySelectorAll('.nav-item').forEach(n => n.classList.remove('active'));
        e.currentTarget.classList.add('active');
      });
    });

    function showSection(section) {
      document.querySelectorAll('.section-content').forEach(s => s.classList.add('hidden'));
      document.getElementById(section + '-section').classList.remove('hidden');
      if (section === 'dashboard') loadDashboard();
      if (section === 'tickets') loadTickets();
      if (section === 'projects') loadProjects();
      if (section === 'users') {
        loadUsers();
        // Ensure event listeners are attached after loading users
        setTimeout(window.attachUserActionListeners, 300);
      }
      if (section === 'groups') loadGroups();
      if (section === 'reminders') loadReminders();
    }

    // Load Dashboard
    async function loadDashboard() {
      try {
        const response = await fetch('/api/it/dashboard/stats', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const stats = await response.json();
        
        document.getElementById('stat-total-tickets').textContent = stats.tickets.total;
        document.getElementById('stat-open-tickets').textContent = stats.tickets.open;
        document.getElementById('stat-active-projects').textContent = stats.projects.active;
        document.getElementById('stat-avg-resolution').textContent = stats.tickets.avgResolutionTimeHours + 'h';
        
        // Load charts
        loadCharts(stats);
        
        // Load recent tickets
        loadRecentTickets();
      } catch (error) {
        console.error('Error loading dashboard:', error);
      }
    }

    function loadCharts(stats) {
      // Destroy existing charts if they exist
      if (categoryChartInstance) {
        categoryChartInstance.destroy();
      }
      if (statusChartInstance) {
        statusChartInstance.destroy();
      }
      
      // Category chart
      const categoryCtx = document.getElementById('categoryChart').getContext('2d');
      categoryChartInstance = new Chart(categoryCtx, {
        type: 'doughnut',
        data: {
          labels: stats.categories.map(c => c._id),
          datasets: [{
            data: stats.categories.map(c => c.count),
            backgroundColor: ['#3b82f6', '#8b5cf6', '#ec4899', '#14b8a6', '#f59e0b', '#ef4444', '#10b981', '#6b7280']
          }]
        }
      });

      // Status chart
      const statusCtx = document.getElementById('statusChart').getContext('2d');
      statusChartInstance = new Chart(statusCtx, {
        type: 'bar',
        data: {
          labels: ['Abierto', 'Asignado', 'En Progreso', 'Resuelto', 'Cerrado'],
          datasets: [{
            label: 'Tickets',
            data: [
              stats.tickets.open,
              stats.tickets.assigned,
              stats.tickets.in_progress,
              stats.tickets.resolved,
              stats.tickets.closed
            ],
            backgroundColor: ['#f59e0b', '#3b82f6', '#8b5cf6', '#10b981', '#6b7280']
          }]
        }
      });
    }

    async function loadRecentTickets() {
      try {
        const response = await fetch('/api/it/tickets?limit=5', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        const data = await response.json();
        
        const tbody = document.getElementById('recent-tickets');
        tbody.innerHTML = data.data.map(ticket => `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${ticket.ticketNumber}</td>
            <td class="px-6 py-4 text-sm text-gray-700">${ticket.title}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="badge badge-${ticket.priority}">${ticket.priority}</span></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="badge badge-${ticket.status.replace('_', '-')}">${ticket.status}</span></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(ticket.createdAt).toLocaleDateString()}</td>
          </tr>
        `).join('');
      } catch (error) {
        console.error('Error loading recent tickets:', error);
      }
    }

    // Load Tickets
    async function loadTickets(filters = {}) {
      try {
        let url = '/api/it/tickets?';
        if (filters.sucursal) url += `sucursal=${filters.sucursal}&`;
        if (filters.status) url += `status=${filters.status}&`;
        if (filters.priority) url += `priority=${filters.priority}&`;
        if (filters.category) url += `category=${filters.category}&`;
        
        const response = await fetch(url, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const data = await response.json();
        
        const sucursalMap = {
          'lomas': '🏢 Lomas',
          'decathlon': '🏃 Decathlon',
          'centro-sur': '📍 Centro Sur',
          'ninguna': '🏠 General'
        };
        
        const tbody = document.getElementById('tickets-table');
        tbody.innerHTML = data.data.map(ticket => `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">${ticket.ticketNumber}</td>
            <td class="px-6 py-4 text-sm">${ticket.title}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm">${sucursalMap[ticket.sucursal] || '🏠 General'}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm">${ticket.category}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="badge badge-${ticket.priority}">${ticket.priority}</span></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="badge badge-${ticket.status.replace('_', '-')}">${ticket.status}</span></td>
            <td class="px-6 py-4 whitespace-nowrap text-sm">
              <button onclick="openReplyModal('${ticket._id}')" class="text-blue-600 hover:text-blue-800 mr-2" title="Responder">
                <i class="fas fa-reply"></i>
              </button>
              <button onclick="openResolveModal('${ticket._id}')" class="text-green-600 hover:text-green-800" title="Marcar como Resuelto">
                <i class="fas fa-check-circle"></i>
              </button>
              <button onclick="viewTicket('${ticket._id}')" class="text-purple-600 hover:text-purple-800" title="Ver detalles">
                <i class="fas fa-eye"></i>
              </button>
            </td>
          </tr>
        `).join('');
      } catch (error) {
        console.error('Error loading tickets:', error);
      }
    }

    async function loadProjects() {
      try {
        const response = await fetch('/api/it/projects?limit=20', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const data = await response.json();
        
        const grid = document.getElementById('projects-grid');
        
        if (!data.data || data.data.length === 0) {
          grid.innerHTML = `
            <div class="col-span-full">
              <div class="text-center py-12 bg-white rounded-lg shadow">
                <i class="fas fa-project-diagram text-6xl text-gray-300 mb-4"></i>
                <p class="text-gray-500">No hay proyectos aún</p>
                <button onclick="openNewProjectModal()" class="mt-4 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg">
                  <i class="fas fa-plus mr-2"></i>Crear primer proyecto
                </button>
            </div>
            </div>
          `;
          return;
        }
        
        grid.innerHTML = data.data.map(project => {
          const statusColors = {
            'planning': 'bg-yellow-100 text-yellow-800',
            'in_progress': 'bg-blue-100 text-blue-800',
            'on_hold': 'bg-orange-100 text-orange-800',
            'completed': 'bg-green-100 text-green-800',
            'cancelled': 'bg-red-100 text-red-800'
          };
          
          const priorityColors = {
            'low': 'text-green-600',
            'medium': 'text-yellow-600',
            'high': 'text-orange-600',
            'critical': 'text-red-600'
          };
          
          return `
          <div class="bg-white rounded-lg shadow hover:shadow-lg transition p-6">
            <div class="flex items-start justify-between mb-3">
              <div class="flex-1">
                <div class="flex items-center mb-2">
                  <p class="text-xs font-mono text-gray-400 mr-2">${project.projectNumber || 'N/A'}</p>
                  <span class="badge ${statusColors[project.status] || 'badge-gray-500'}">${project.status.replace('_', ' ')}</span>
                </div>
                <h3 class="text-lg font-semibold text-gray-800 mb-2">${project.name}</h3>
              </div>
            </div>
            <p class="text-gray-600 text-sm mb-4 line-clamp-2">${project.description || 'Sin descripción'}</p>
            <div class="mb-4">
              <div class="flex justify-between text-sm mb-1">
                <span class="font-medium">Progreso</span>
                <span class="font-bold">${project.progress || 0}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full" style="width: ${project.progress || 0}%"></div>
              </div>
            </div>
            <div class="flex items-center justify-between text-sm mb-3">
              <span class="font-medium ${priorityColors[project.priority] || 'text-gray-600'}">
                <i class="fas fa-flag mr-1"></i>${project.priority}
              </span>
              <span class="text-gray-500">
                <i class="fas fa-calendar mr-1"></i>${new Date(project.startDate).toLocaleDateString()}
              </span>
            </div>
            ${project.tasks && project.tasks.length > 0 ? `
              <div class="mb-3">
                <p class="text-xs text-gray-500 mb-1">
                  <i class="fas fa-tasks mr-1"></i>Tareas: ${project.tasks.filter(t => t.status === 'completed').length}/${project.tasks.length} completadas
                </p>
          </div>
            ` : ''}
            <div class="flex justify-end space-x-2 pt-3 border-t">
              <button onclick="viewProjectDetails('${project._id}')" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded" title="Ver detalles">
                <i class="fas fa-eye"></i>
              </button>
              <button onclick="editProject('${project._id}')" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded" title="Editar">
                <i class="fas fa-edit"></i>
              </button>
              <button onclick="deleteProject('${project._id}')" class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded" title="Eliminar">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
        }).join('');
      } catch (error) {
        console.error('Error loading projects:', error);
      }
    }
    
    async function loadUsers() {
      try {
        const response = await fetch('/crm/contacts?limit=100', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const data = await response.json();
        
        const contacts = data.data || data.contacts || [];
        
        // Update stats
        document.getElementById('stat-total-users').textContent = contacts.length;
        
        // Count active today (last 24 hours)
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const activeToday = contacts.filter(c => {
          const lastInteraction = new Date(c.lastInteraction);
          return lastInteraction >= today;
        }).length;
        document.getElementById('stat-active-today').textContent = activeToday;
        
        // Count new users (last 7 days)
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        const newUsers = contacts.filter(c => {
          const firstInteraction = new Date(c.firstInteraction || c.createdAt);
          return firstInteraction >= weekAgo;
        }).length;
        document.getElementById('stat-new-users').textContent = newUsers;
        
        // Count paused users
        const pausedUsers = contacts.filter(c => c.botPaused).length;
        document.getElementById('stat-paused-users').textContent = pausedUsers;
        
        // Render table
        const tbody = document.getElementById('users-table');
        if (!tbody) {
          console.error('users-table element not found');
          return;
        }
        
        // Clear tbody first
        tbody.innerHTML = '';
        
        // Build HTML for all rows
        const rowsHTML = contacts.map(contact => {
          const lastInteraction = new Date(contact.lastInteraction);
          const isToday = lastInteraction.toDateString() === today.toDateString();
          
          const phoneNumber = String(contact.phoneNumber || '');
          const role = String(contact.role || 'user');
          const contactName = (contact.name || contact.pushName || 'Sin nombre').replace(/</g, '&lt;').replace(/>/g, '&gt;');
          const initial = contact.name ? contact.name.charAt(0).toUpperCase() : '?';
          
          // Last interaction display
          const lastInteractionHTML = isToday 
            ? '<span class="text-green-600"><i class="fas fa-circle text-xs mr-1"></i>Hoy</span>'
            : lastInteraction.toLocaleString();
          
          // Role badge
          let roleBadge = '<span class="badge badge-closed">Usuario</span>';
          if (contact.role === 'ceo') {
            roleBadge = '<span class="badge" style="background: #fef3c7; color: #d97706;"><i class="fas fa-crown mr-1"></i>CEO</span>';
          } else if (contact.role === 'boss') {
            roleBadge = '<span class="badge" style="background: #dbeafe; color: #1e40af;"><i class="fas fa-briefcase mr-1"></i>Jefe</span>';
          }
          
          // Status badge
          const statusBadge = contact.botPaused 
            ? '<span class="badge badge-closed">Pausado</span>'
            : '<span class="badge badge-open">Activo</span>';
          
          // Action buttons
          const pauseResumeAction = contact.botPaused ? 'resume' : 'pause';
          const pauseResumeText = contact.botPaused ? 'Reanudar' : 'Pausar';
          const pauseResumeIcon = contact.botPaused ? 'fa-play' : 'fa-pause';
          const pauseResumeColor = contact.botPaused ? '#16a34a' : '#ea580c';
          
          const actionsHTML = `
            <div class="flex flex-wrap gap-1.5 items-center justify-start">
              <button 
                type="button"
                data-action="changeRole"
                data-phone="${phoneNumber}"
                data-role="${role}"
                class="inline-flex items-center justify-center px-2 py-1.5 rounded text-xs font-medium text-white bg-indigo-600 hover:bg-indigo-700 transition-colors shadow-sm"
                style="display: inline-flex !important;"
                title="Cambiar Rol">
                <i class="fas fa-user-tag text-xs"></i>
                <span class="ml-1 hidden sm:inline">Rol</span>
              </button>
              <button 
                type="button"
                data-action="${pauseResumeAction}"
                data-phone="${phoneNumber}"
                class="inline-flex items-center justify-center px-2 py-1.5 rounded text-xs font-medium text-white transition-colors shadow-sm"
                style="background-color: ${pauseResumeColor} !important; display: inline-flex !important;"
                onmouseover="this.style.opacity='0.9'"
                onmouseout="this.style.opacity='1'"
                title="${pauseResumeText}">
                <i class="fas ${pauseResumeIcon} text-xs"></i>
                <span class="ml-1 hidden sm:inline">${pauseResumeText}</span>
              </button>
              <button 
                type="button"
                data-action="sendMessage"
                data-phone="${phoneNumber}"
                class="inline-flex items-center justify-center px-2 py-1.5 rounded text-xs font-medium text-white bg-purple-600 hover:bg-purple-700 transition-colors shadow-sm"
                style="display: inline-flex !important;"
                title="Enviar Mensaje">
                <i class="fas fa-paper-plane text-xs"></i>
                <span class="ml-1 hidden sm:inline">Enviar</span>
              </button>
            </div>
          `;
          
          return `
            <tr class="hover:bg-gray-50">
              <td class="px-2 py-3 whitespace-nowrap">
                <div class="flex items-center min-w-0">
                  <div class="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold text-xs flex-shrink-0">
                    ${initial}
                  </div>
                  <div class="ml-2 min-w-0 flex-1">
                    <p class="text-sm font-medium text-gray-800 truncate max-w-[150px] sm:max-w-none">${contactName}</p>
                    <p class="text-xs text-gray-500 hidden lg:block">${contact.language || 'es'}</p>
                  </div>
                </div>
              </td>
              <td class="px-2 py-3 whitespace-nowrap text-sm text-gray-900 hidden md:table-cell">
                <span class="text-xs">${phoneNumber}</span>
              </td>
              <td class="px-2 py-3 whitespace-nowrap text-sm text-gray-900">
                <span class="font-medium text-xs">${contact.interactionsCount || 0}</span>
              </td>
              <td class="px-2 py-3 whitespace-nowrap text-xs text-gray-900 hidden lg:table-cell">${lastInteractionHTML}</td>
              <td class="px-2 py-3 whitespace-nowrap text-sm">${roleBadge}</td>
              <td class="px-2 py-3 whitespace-nowrap text-sm">${statusBadge}</td>
              <td class="px-2 py-3 text-sm whitespace-nowrap">${actionsHTML}</td>
            </tr>
          `;
        }).join('');
        
        // Insert all rows at once
        tbody.innerHTML = rowsHTML;
        
        // Ensure event listeners are attached after rendering
        setTimeout(window.attachUserActionListeners, 100);
      } catch (error) {
        console.error('Error loading users:', error);
      }
    }

    // Groups
    async function loadGroups() {
      try {
        const q = (document.getElementById('groups-search')?.value || '').trim();
        const response = await fetch('/crm/groups' + (q ? `?q=${encodeURIComponent(q)}` : ''), {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const groups = await response.json();
        const tbody = document.getElementById('groups-table');
        tbody.innerHTML = (groups || []).map(g => `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 text-sm">${g.name || '-'}</td>
            <td class="px-6 py-4 text-xs text-gray-500">${g.id}</td>
            <td class="px-6 py-4 text-sm">${g.participants || '-'}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm">
              <button onclick="promptSendToGroupId('${'${g.id}'}', ${'${g.participants || 0}'})" class="text-purple-600 hover:text-purple-800 mr-3" title="Enviar mensaje">
                <i class="fas fa-paper-plane"></i>
              </button>
              <button onclick="copyToClipboard('${'${g.id}'}')" class="text-gray-600 hover:text-gray-800" title="Copiar ID">
                <i class="fas fa-copy"></i>
              </button>
            </td>
          </tr>
        `).join('');
      } catch (error) {
        console.error('Error loading groups:', error);
        alert('❌ Error al cargar grupos');
      }
    }

    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        alert('ID copiado al portapapeles');
      });
    }

    function shouldConfirmForSize(size) {
      return typeof size === 'number' && size >= 100;
    }

    async function promptSendToGroupId(groupId, size) {
      const message = prompt(`Mensaje para el grupo (ID: ${'${groupId}'}):`, 'Hola grupo!');
      if (!message || !message.trim()) return;
      if (shouldConfirmForSize(size)) {
        const ok = confirm(`Este grupo tiene aproximadamente ${'${size}'} miembros. ¿Confirmas el envío?`);
        if (!ok) return;
      }
      try {
        const response = await fetch(`/crm/groups/${groupId}/message`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ message })
        });
        const data = await response.json();
        if (response.ok && data.success) {
          alert('✅ Mensaje enviado al grupo');
        } else {
          alert(`❌ Error: ${data.error || 'No se pudo enviar'}`);
        }
      } catch (error) {
        console.error('Error sending to group:', error);
        alert('❌ Error al enviar mensaje al grupo');
      }
    }

    async function promptSendToGroupByName() {
      const name = prompt('Nombre exacto del grupo:');
      if (!name || !name.trim()) return;
      const message = prompt(`Mensaje para "${name}":`, 'Hola grupo!');
      if (!message || !message.trim()) return;
      try {
        const response = await fetch(`/crm/groups/by-name/${encodeURIComponent(name)}/message`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ message })
        });
        const data = await response.json();
        if (response.ok && data.success) {
          alert('✅ Mensaje enviado al grupo');
        } else {
          alert(`❌ Error: ${data.error || 'Grupo no encontrado o fallo de envío'}`);
        }
      } catch (error) {
        console.error('Error sending to group by name:', error);
        alert('❌ Error al enviar mensaje al grupo');
      }
    }

    let groupsSearchTimer = null;
    function debouncedLoadGroups() {
      if (groupsSearchTimer) clearTimeout(groupsSearchTimer);
      groupsSearchTimer = setTimeout(loadGroups, 300);
    }

    // Payment Reminders
    async function loadReminders() {
      try {
        const response = await fetch('/crm/payment-reminders', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const reminders = await response.json();
        const tbody = document.getElementById('reminders-table');
        
        if (!reminders || reminders.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="7" class="px-6 py-8 text-center text-gray-500">
                <i class="fas fa-bell text-4xl mb-4"></i>
                <p>No hay recordatorios configurados</p>
                <button onclick="openNewReminderModal()" class="mt-4 bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg">
                  <i class="fas fa-plus mr-2"></i>Crear primer recordatorio
                </button>
              </td>
            </tr>
          `;
          return;
        }
        
        tbody.innerHTML = reminders.map(r => {
          const dueDate = new Date(r.dueDate);
          const days = r.reminderDays.join(', ');
          const isOverdue = dueDate < new Date();
          
          return `
            <tr class="hover:bg-gray-50 ${isOverdue ? 'bg-red-50' : ''}">
              <td class="px-6 py-4 text-sm">
                <div class="flex items-center">
                  ${r.isMonthly ? '<i class="fas fa-sync text-blue-600 mr-2"></i>' : ''}
                  <span class="font-medium">${r.title}</span>
                </div>
              </td>
              <td class="px-6 py-4 text-sm">${r.phoneNumber}</td>
              <td class="px-6 py-4 text-sm">${r.amount ? `$${r.amount}` : '-'}</td>
              <td class="px-6 py-4 text-sm ${isOverdue ? 'text-red-600 font-bold' : ''}">${dueDate.toLocaleDateString()}</td>
              <td class="px-6 py-4 text-sm">${days} días antes</td>
              <td class="px-6 py-4 text-sm">
                ${r.isActive ? 
                  '<span class="badge badge-open">Activo</span>' : 
                  '<span class="badge badge-closed">Inactivo</span>'
                }
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm">
                <button onclick="editReminder('${r._id}')" class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded mr-2" title="Editar">
                  <i class="fas fa-edit"></i>
                </button>
                <button onclick="deleteReminder('${r._id}')" class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded" title="Eliminar">
                  <i class="fas fa-trash"></i>
                </button>
              </td>
            </tr>
          `;
        }).join('');
      } catch (error) {
        console.error('Error loading reminders:', error);
        alert('❌ Error al cargar recordatorios');
      }
    }

    let currentReminderId = null;

    function openNewReminderModal() {
      currentReminderId = null;
      document.getElementById('reminder-modal-title').textContent = 'Nuevo Recordatorio';
      document.getElementById('reminder-form').reset();
      document.getElementById('reminder-modal').classList.remove('hidden');
    }

    function closeReminderModal() {
      document.getElementById('reminder-modal').classList.add('hidden');
      document.getElementById('reminder-form').reset();
      currentReminderId = null;
    }

    async function editReminder(id) {
      try {
        const response = await fetch(`/crm/payment-reminders/${id}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const reminder = await response.json();
        
        currentReminderId = id;
        document.getElementById('reminder-modal-title').textContent = 'Editar Recordatorio';
        document.getElementById('reminder-title').value = reminder.title;
        document.getElementById('reminder-description').value = reminder.description || '';
        document.getElementById('reminder-phone').value = reminder.phoneNumber;
        document.getElementById('reminder-amount').value = reminder.amount || '';
        document.getElementById('reminder-due-date').value = new Date(reminder.dueDate).toISOString().split('T')[0];
        document.getElementById('reminder-days').value = reminder.reminderDays.join(', ');
        document.getElementById('reminder-monthly').checked = reminder.isMonthly || false;
        
        document.getElementById('reminder-modal').classList.remove('hidden');
      } catch (error) {
        console.error('Error loading reminder:', error);
        alert('Error al cargar el recordatorio');
      }
    }

    async function deleteReminder(id) {
      if (!confirm('¿Estás seguro de que deseas eliminar este recordatorio?')) return;
      
      try {
        const response = await fetch(`/crm/payment-reminders/${id}`, {
          method: 'DELETE',
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        if (response.ok) {
          alert('✅ Recordatorio eliminado exitosamente');
          loadReminders();
        } else {
          const data = await response.json();
          alert(`❌ Error: ${data.error || 'Error al eliminar recordatorio'}`);
        }
      } catch (error) {
        console.error('Error deleting reminder:', error);
        alert('❌ Error al eliminar recordatorio');
      }
    }

    function applyTicketFilters() {
      const filters = {
        sucursal: document.getElementById('filter-sucursal').value,
        status: document.getElementById('filter-status').value,
        priority: document.getElementById('filter-priority').value,
        category: document.getElementById('filter-category').value
      };
      loadTickets(filters);
    }

    function openNewTicketModal() {
      document.getElementById('ticket-modal').classList.remove('hidden');
    }

    function closeTicketModal() {
      document.getElementById('ticket-modal').classList.add('hidden');
      document.getElementById('ticket-form').reset();
    }
    
    // Reply modal functions
    function openReplyModal(ticketId) {
      currentTicketId = ticketId;
      document.getElementById('reply-modal').classList.remove('hidden');
    }
    
    function closeReplyModal() {
      document.getElementById('reply-modal').classList.add('hidden');
      document.getElementById('reply-form').reset();
      currentTicketId = null;
    }
    
    // Resolve modal functions
    function openResolveModal(ticketId) {
      currentTicketId = ticketId;
      document.getElementById('resolve-modal').classList.remove('hidden');
    }
    
    function closeResolveModal() {
      document.getElementById('resolve-modal').classList.add('hidden');
      document.getElementById('resolve-form').reset();
      currentTicketId = null;
    }

    let currentProjectId = null;

    function openNewProjectModal() {
      currentProjectId = null;
      document.getElementById('project-modal-title').textContent = 'Nuevo Proyecto';
      document.getElementById('project-form').reset();
      document.getElementById('project-modal').classList.remove('hidden');
    }

    function closeProjectModal() {
      document.getElementById('project-modal').classList.add('hidden');
      document.getElementById('project-form').reset();
      currentProjectId = null;
    }

    async function editProject(projectId) {
      try {
        const response = await fetch(`/api/it/projects/${projectId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        const project = await response.json();
        
        currentProjectId = projectId;
        document.getElementById('project-modal-title').textContent = 'Editar Proyecto';
        document.getElementById('project-name').value = project.name;
        document.getElementById('project-description').value = project.description;
        document.getElementById('project-status').value = project.status;
        document.getElementById('project-priority').value = project.priority;
        document.getElementById('project-progress').value = project.progress || 0;
        
        document.getElementById('project-modal').classList.remove('hidden');
      } catch (error) {
        console.error('Error loading project:', error);
        alert('Error al cargar el proyecto');
      }
    }

    async function viewProjectDetails(projectId) {
      alert(`Ver detalles del proyecto ${projectId}`);
      // TODO: Implementar modal de detalles
    }

    async function deleteProject(projectId) {
      if (!confirm('¿Estás seguro de que deseas eliminar este proyecto?')) return;
      
      try {
        const response = await fetch(`/api/it/projects/${projectId}`, {
          method: 'DELETE',
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (handleAuthError(response)) return;
        
        if (response.ok) {
          alert('✅ Proyecto eliminado exitosamente');
          loadProjects();
        } else {
          const data = await response.json();
          alert(`❌ Error: ${data.error || 'Error al eliminar proyecto'}`);
        }
      } catch (error) {
        console.error('Error deleting project:', error);
        alert('❌ Error al eliminar proyecto');
      }
    }
    
    // View ticket function
    async function viewTicket(ticketId) {
      try {
        currentTicketId = ticketId;
        
        const response = await fetch(`/api/it/tickets/${ticketId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        const ticket = await response.json();
        
        if (!response.ok) {
          alert('Error al cargar el ticket');
          return;
        }
        
        // Renderizar detalles del ticket
        const sucursalMap = {
          'lomas': '🏢 Lomas',
          'decathlon': '🏃 Decathlon',
          'centro-sur': '📍 Centro Sur',
          'ninguna': '🏠 General'
        };
        
        const categoryEmoji = {
          'hardware': '🔧',
          'software': '💻',
          'network': '🌐',
          'security': '🔒',
          'm365': '📧',
          'pos': '💳',
          'backup': '💾',
          'other': '📋'
        };
        
        const priorityEmoji = {
          'urgent': '🔴',
          'high': '🟠',
          'medium': '🟡',
          'low': '🟢'
        };
        
        const statusMap = {
          'open': 'Abierto',
          'assigned': 'Asignado',
          'in_progress': 'En Progreso',
          'resolved': 'Resuelto',
          'closed': 'Cerrado'
        };
        
        const statusBadgeMap = {
          'open': 'badge-open',
          'assigned': 'badge-assigned',
          'in_progress': 'badge-in-progress',
          'resolved': 'badge-resolved',
          'closed': 'badge-closed'
        };
        
        const detailsHtml = `
          <div class="grid grid-cols-2 gap-4 mb-4">
            <div class="bg-blue-50 p-4 rounded-lg">
              <p class="text-sm text-gray-600">Número de Ticket</p>
              <p class="text-xl font-bold">${ticket.ticketNumber}</p>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg">
              <p class="text-sm text-gray-600">Estado</p>
              <p><span class="badge ${statusBadgeMap[ticket.status]}">${statusMap[ticket.status]}</span></p>
            </div>
          </div>
          
          <div class="bg-white border p-4 rounded-lg">
            <h4 class="font-bold text-gray-800 mb-2">${categoryEmoji[ticket.category]} ${ticket.category.toUpperCase()}</h4>
            <h3 class="text-lg font-bold text-gray-800 mb-2">${ticket.title}</h3>
            <p class="text-gray-600 mb-4">${ticket.description}</p>
            
            <div class="grid grid-cols-3 gap-4 text-sm">
              <div>
                <p class="text-gray-600">Sucursal</p>
                <p class="font-semibold">${sucursalMap[ticket.sucursal] || '🏠 General'}</p>
              </div>
              <div>
                <p class="text-gray-600">Prioridad</p>
                <p class="font-semibold">${priorityEmoji[ticket.priority]} ${ticket.priority}</p>
              </div>
              <div>
                <p class="text-gray-600">Creador</p>
                <p class="font-semibold">${ticket.creatorName || ticket.createdBy}</p>
              </div>
            </div>
            
            ${ticket.solution ? `
              <div class="mt-4 bg-green-50 border border-green-200 p-4 rounded-lg">
                <h4 class="font-bold text-green-800 mb-2">✅ Solución</h4>
                <p class="text-gray-700">${ticket.solution}</p>
              </div>
            ` : ''}
          </div>
          
          ${ticket.comments && ticket.comments.length > 0 ? `
            <div class="bg-white border p-4 rounded-lg">
              <h4 class="font-bold text-gray-800 mb-3">💬 Historial de Comentarios</h4>
              <div class="space-y-3">
                ${ticket.comments.map(comment => `
                  <div class="border-l-4 border-blue-500 pl-3">
                    <div class="flex justify-between">
                      <p class="font-semibold text-gray-800">${comment.user}</p>
                      <p class="text-xs text-gray-500">${new Date(comment.createdAt).toLocaleString()}</p>
                    </div>
                    <p class="text-gray-600 mt-1">${comment.message}</p>
                  </div>
                `).join('')}
              </div>
            </div>
          ` : ''}
          
          <div class="bg-gray-50 p-4 rounded-lg text-sm text-gray-600">
            <p><strong>Creado:</strong> ${new Date(ticket.createdAt).toLocaleString()}</p>
            ${ticket.updatedAt ? `<p><strong>Actualizado:</strong> ${new Date(ticket.updatedAt).toLocaleString()}</p>` : ''}
            ${ticket.resolvedAt ? `<p><strong>Resuelto:</strong> ${new Date(ticket.resolvedAt).toLocaleString()}</p>` : ''}
            ${ticket.resolutionTime ? `<p><strong>Tiempo de Resolución:</strong> ${Math.round(ticket.resolutionTime / 60)} horas</p>` : ''}
          </div>
        `;
        
        document.getElementById('ticket-details').innerHTML = detailsHtml;
        document.getElementById('view-modal').classList.remove('hidden');
        
      } catch (error) {
        console.error('Error loading ticket details:', error);
        alert('Error al cargar los detalles del ticket');
      }
    }
    
    function closeViewModal() {
      document.getElementById('view-modal').classList.add('hidden');
      currentTicketId = null;
    }
    
    // Bot control functions
    async function checkBotStatus() {
      try {
        const response = await fetch('/api/bot/status');
        const data = await response.json();
        updateBotControlButton(data.isPaused);
      } catch (error) {
        console.error('Error checking bot status:', error);
      }
    }
    
    function updateBotControlButton(isPaused) {
      const btn = document.getElementById('bot-control-btn');
      const text = document.getElementById('bot-control-text');
      const icon = btn.querySelector('i');
      
      if (isPaused) {
        btn.className = 'px-4 py-2 rounded-lg font-medium transition flex items-center bg-green-600 hover:bg-green-700 text-white';
        icon.className = 'fas fa-play mr-2';
        text.textContent = 'Reanudar Bot';
      } else {
        btn.className = 'px-4 py-2 rounded-lg font-medium transition flex items-center bg-orange-600 hover:bg-orange-700 text-white';
        icon.className = 'fas fa-pause mr-2';
        text.textContent = 'Pausar Bot';
      }
    }
    
    async function toggleBotStatus() {
      try {
        const response = await fetch('/api/bot/status');
        const data = await response.json();
        const isPaused = data.isPaused;
        
        if (isPaused) {
          // Resume bot
          const resumeResponse = await fetch('/api/bot/resume', {
            method: 'POST'
          });
          const result = await resumeResponse.json();
          
          if (result.success) {
            alert('✅ Bot reanudado exitosamente');
          } else {
            alert('❌ Error al reanudar el bot');
          }
        } else {
          // Pause bot
          const pauseResponse = await fetch('/api/bot/pause', {
            method: 'POST'
          });
          const result = await pauseResponse.json();
          
          if (result.success) {
            alert('⏸️ Bot pausado exitosamente');
          } else {
            alert('❌ Error al pausar el bot');
          }
        }
        
        // Update button
        await checkBotStatus();
      } catch (error) {
        console.error('Error toggling bot status:', error);
        alert('❌ Error al cambiar el estado del bot');
      }
    }
    
    // Check bot status on load
    checkBotStatus();
    
    // User management functions - Make them globally available
    window.viewUserDetails = function(userId) {
      alert(`Ver detalles del usuario ${userId}`);
      // TODO: Implementar modal de detalles de usuario
    };
    
    window.pauseUser = async function(phoneNumber) {
      if (confirm(`¿Pausar al usuario ${phoneNumber}?\n\nEl usuario no recibirá respuestas automáticas del bot.`)) {
        try {
          const response = await fetch(`/crm/contacts/${phoneNumber}/pause`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            }
          });
          
          const data = await response.json();
          
          if (response.ok && data.success) {
            alert(`✅ Usuario ${phoneNumber} pausado exitosamente`);
            loadUsers(); // Reload users
          } else {
            alert(`❌ Error: ${data.error || 'Error desconocido'}`);
          }
        } catch (error) {
          console.error('Error pausing user:', error);
          alert('❌ Error al pausar usuario');
        }
      }
    };
    
    window.resumeUser = async function(phoneNumber) {
      try {
        const response = await fetch(`/crm/contacts/${phoneNumber}/resume`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
          alert(`✅ Usuario ${phoneNumber} reanudado exitosamente`);
          loadUsers(); // Reload users
        } else {
          alert(`❌ Error: ${data.error || 'Error desconocido'}`);
        }
      } catch (error) {
        console.error('Error resuming user:', error);
        alert('❌ Error al reanudar usuario');
      }
    };
    
    window.sendMessageToUserDirect = async function(phoneNumber) {
      const message = prompt(`Enviar mensaje a ${phoneNumber}:`, 'Hola');
      if (message && message.trim()) {
      try {
        const response = await fetch(`/crm/contacts/${phoneNumber}/message`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ message })
        });
          
          const data = await response.json();
          
          if (response.ok && data.success) {
            alert(`✅ Mensaje enviado exitosamente`);
          } else {
            alert(`❌ Error: ${data.error || 'Error al enviar mensaje'}`);
          }
        } catch (error) {
          console.error('Error sending message:', error);
          alert('❌ Error al enviar mensaje');
        }
      }
    };

    window.changeUserRole = async function(phoneNumber, currentRole) {
      const roleOptions = [
        { value: 'user', label: 'Usuario' },
        { value: 'boss', label: 'Jefe' },
        { value: 'ceo', label: 'CEO' }
      ];
      
      const roleLabels = { 'user': 'Usuario', 'boss': 'Jefe', 'ceo': 'CEO' };
      
      const options = roleOptions.map(r => 
        `${r.value === currentRole ? '★ ' : ''}${r.label}`
      ).join('\n');
      
      const choice = prompt(`Cambiar rol de ${phoneNumber}\n\nRol actual: ${roleLabels[currentRole] || 'Usuario'}\n\nOpciones:\n${options}`);
      
      if (!choice) return;
      
      // Remove the ★ if present
      const selectedOption = choice.replace('★ ', '').trim();
      const selectedRole = roleOptions.find(r => r.label === selectedOption);
      
      if (!selectedRole) {
        alert('Opción inválida');
        return;
      }
      
      try {
        const response = await fetch(`/crm/contacts/${phoneNumber}/role`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ role: selectedRole.value })
        });
        
        if (handleAuthError(response)) return;
        
        const data = await response.json();
        
        if (response.ok && data.success) {
          alert(`✅ Rol actualizado a ${selectedOption}`);
          loadUsers();
        } else {
          alert(`❌ Error: ${data.error || 'Error al cambiar rol'}`);
        }
      } catch (error) {
        console.error('Error changing role:', error);
        alert('❌ Error al cambiar rol');
      }
    };
    
    // Event delegation for user action buttons - attach after functions are defined
    window.attachUserActionListeners = function() {
      const usersTable = document.getElementById('users-table');
      if (usersTable) {
        // Remove old listener if exists
        if (window.userActionHandler) {
          usersTable.removeEventListener('click', window.userActionHandler);
        }
        
        // Create new handler
        window.userActionHandler = function(e) {
          // Check if clicked element or its parent is a button with data-action
          const button = e.target.closest('button[data-action]');
          if (!button) return;
          
          e.preventDefault();
          e.stopPropagation();
          
          const action = button.dataset.action;
          const phoneNumber = button.dataset.phone;
          const role = button.dataset.role;
          
          console.log('Button clicked:', { action, phoneNumber, role });
          
          if (action === 'changeRole' && window.changeUserRole) {
            window.changeUserRole(phoneNumber, role || 'user');
          } else if (action === 'pause' && window.pauseUser) {
            window.pauseUser(phoneNumber);
          } else if (action === 'resume' && window.resumeUser) {
            window.resumeUser(phoneNumber);
          } else if (action === 'sendMessage' && window.sendMessageToUserDirect) {
            window.sendMessageToUserDirect(phoneNumber);
          } else {
            console.error('Function not available or action unknown:', action);
            alert('Error: La función no está disponible. Por favor, recarga la página.');
          }
        };
        
        usersTable.addEventListener('click', window.userActionHandler);
        console.log('User action listeners attached');
      } else {
        console.warn('users-table element not found when trying to attach listeners');
      }
    };
    
    // Attach listeners when DOM is ready and after functions are defined
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(window.attachUserActionListeners, 500);
      });
    } else {
      // DOM already loaded, wait a bit for functions to be defined
      setTimeout(window.attachUserActionListeners, 500);
    }
    

    document.getElementById('ticket-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      // Implementation for submitting ticket
      alert('Funcionalidad de creación de ticket próximamente');
    });
    
    // Project form listener
    document.getElementById('project-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const name = document.getElementById('project-name').value;
      const description = document.getElementById('project-description').value;
      const status = document.getElementById('project-status').value;
      const priority = document.getElementById('project-priority').value;
      const progress = parseInt(document.getElementById('project-progress').value) || 0;
      
      try {
        let url = '/api/it/projects';
        let method = 'POST';
        let body = { name, description, status, priority, progress };
        
        if (currentProjectId) {
          url += `/${currentProjectId}`;
          method = 'PUT';
        }
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(body)
        });
        
        if (handleAuthError(response)) return;
        
        const data = await response.json();
        
        if (response.ok) {
          alert(`✅ Proyecto ${currentProjectId ? 'actualizado' : 'creado'} exitosamente`);
          closeProjectModal();
          loadProjects();
        } else {
          alert(`❌ Error: ${data.error || 'Error desconocido'}`);
        }
      } catch (error) {
        console.error('Error saving project:', error);
        alert('❌ Error al guardar proyecto');
      }
    });
    
    // Reminder form listener
    document.getElementById('reminder-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const title = document.getElementById('reminder-title').value;
      const description = document.getElementById('reminder-description').value;
      const phoneNumber = document.getElementById('reminder-phone').value;
      const amount = document.getElementById('reminder-amount').value;
      const dueDate = document.getElementById('reminder-due-date').value;
      const reminderDays = document.getElementById('reminder-days').value.split(',').map(d => parseInt(d.trim())).filter(d => !isNaN(d));
      const isMonthly = document.getElementById('reminder-monthly').checked;
      
      try {
        let url = '/crm/payment-reminders';
        let method = 'POST';
        let body = {
          title,
          description,
          phoneNumber,
          amount: amount ? parseFloat(amount) : undefined,
          dueDate,
          reminderDays,
          isMonthly
        };
        
        if (currentReminderId) {
          url += `/${currentReminderId}`;
          method = 'PUT';
        }
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(body)
        });
        
        if (handleAuthError(response)) return;
        
        const data = await response.json();
        
        if (response.ok) {
          alert(`✅ Recordatorio ${currentReminderId ? 'actualizado' : 'creado'} exitosamente`);
          closeReminderModal();
          loadReminders();
        } else {
          alert(`❌ Error: ${data.error || 'Error desconocido'}`);
        }
      } catch (error) {
        console.error('Error saving reminder:', error);
        alert('❌ Error al guardar recordatorio');
      }
    });
    
    // Reply form listener
    document.getElementById('reply-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const message = document.getElementById('reply-message').value;
      
      if (!message.trim()) {
        alert('Por favor, escribe un mensaje');
        return;
      }
      
      try {
        const response = await fetch(`/api/it/tickets/${currentTicketId}/send-message`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ message })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          alert('✅ Mensaje enviado exitosamente');
          closeReplyModal();
          loadTickets(); // Reload tickets
        } else {
          alert('❌ Error al enviar mensaje: ' + (data.error || 'Error desconocido'));
        }
      } catch (error) {
        console.error('Error sending message:', error);
        alert('❌ Error al enviar mensaje');
      }
    });
    
    // Resolve form listener
    document.getElementById('resolve-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const solution = document.getElementById('resolve-solution').value;
      
      try {
        const response = await fetch(`/api/it/tickets/${currentTicketId}/resolve`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ solution })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          alert('✅ Ticket marcado como resuelto y mensaje enviado');
          closeResolveModal();
          loadTickets(); // Reload tickets
        } else {
          alert('❌ Error al resolver ticket: ' + (data.error || 'Error desconocido'));
        }
      } catch (error) {
        console.error('Error resolving ticket:', error);
        alert('❌ Error al resolver ticket');
      }
    });

    // Logout button
    const logoutBtn = document.getElementById('logout');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function () {
        localStorage.removeItem('token');
        window.location.href = '/admin/login';
      });
    }

    // Show dashboard by default
    document.querySelector('[data-section="dashboard"]').click();

    // Check WhatsApp status and update button
    async function checkWhatsAppStatus() {
      try {
        const response = await fetch('/qr-status');
        const data = await response.json();
        
        // Update dashboard button
        const btn = document.getElementById('whatsapp-btn');
        const btnText = document.getElementById('whatsapp-btn-text');
        
        // Update sidebar button
        const btnSidebar = document.getElementById('whatsapp-btn-sidebar');
        const btnTextSidebar = document.getElementById('whatsapp-btn-text-sidebar');
        
        console.log('🔍 WhatsApp status check:', data.qrScanned);
        
        const isConnected = data.qrScanned;
        
        // Update dashboard button
        if (btn && btnText) {
          if (isConnected) {
            console.log('✅ WhatsApp conectado - cambiando botón a naranja');
            btn.className = 'bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-medium transition flex items-center';
            btnText.textContent = 'Cambiar WhatsApp';
          } else {
            console.log('❌ WhatsApp NO conectado - botón verde');
            btn.className = 'bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition flex items-center';
            btnText.textContent = 'Vincular WhatsApp';
          }
        }
        
        // Update sidebar button
        if (btnSidebar && btnTextSidebar) {
          if (isConnected) {
            btnSidebar.className = 'w-full bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition flex items-center justify-center mb-3';
            btnTextSidebar.textContent = '🔴 Desconectar WhatsApp';
          } else {
            btnSidebar.className = 'w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition flex items-center justify-center mb-3';
            btnTextSidebar.textContent = 'Vincular WhatsApp';
          }
        }
        
      } catch (error) {
        console.error('Error checking WhatsApp status:', error);
      }
    }

    // Check status on load and periodically
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', checkWhatsAppStatus);
    } else {
      setTimeout(checkWhatsAppStatus, 100);
    }
    
    setInterval(checkWhatsAppStatus, 5000);

    // QR Modal Functions
    function openQRModal() {
      // Check current status first
      fetch('/qr-status')
        .then(response => response.json())
        .then(data => {
          const modal = document.getElementById('qr-modal');
          modal.classList.remove('hidden');
          
          if (data.qrScanned) {
            // If connected, show disconnect option
            showDisconnectOption();
          } else {
            // If not connected, show QR
            fetchQRCode();
          }
        });
    }
    
    function showDisconnectOption() {
      const qrContainer = document.getElementById('qr-code-container');
      qrContainer.innerHTML = `
        <div class="text-center p-8">
          <i class="fas fa-exclamation-triangle text-orange-600 text-6xl mb-4"></i>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">WhatsApp ya está vinculado</h3>
          <p class="text-gray-600 mb-4">Hay un número de WhatsApp conectado actualmente</p>
          <button onclick="disconnectAndReconnect()" class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-medium text-lg mt-4">
            🔴 Desconectar y Vincular Otro
          </button>
          <p class="text-xs text-gray-500 mt-2">Esto cerrará la sesión actual</p>
        </div>
      `;
    }

    function closeQRModal() {
      document.getElementById('qr-modal').classList.add('hidden');
    }

    async function fetchQRCode() {
      try {
        const response = await fetch('/qr-status');
        const data = await response.json();
        
        const qrContainer = document.getElementById('qr-code-container');
        
        if (data.qrScanned) {
          qrContainer.innerHTML = `
            <div class="text-center p-8">
              <i class="fas fa-check-circle text-green-600 text-6xl mb-4"></i>
              <h3 class="text-xl font-semibold text-gray-800 mb-2">WhatsApp Conectado</h3>
              <p class="text-gray-600 mb-4">El bot está funcionando correctamente</p>
              <button onclick="disconnectAndReconnect()" class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-medium">
                Desconectar y Vincular Nuevo
              </button>
            </div>
          `;
        } else if (data.qrCodeData) {
          qrContainer.innerHTML = `
            <div class="text-center p-8">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Escanea este código con WhatsApp</h3>
              <img src="https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(data.qrCodeData)}&size=300x300" 
                   alt="QR Code" 
                   class="mx-auto border-4 border-gray-200 rounded-lg"/>
              <p class="text-sm text-gray-600 mt-4">1. Abre WhatsApp en tu teléfono</p>
              <p class="text-sm text-gray-600">2. Ve a Configuración → Dispositivos vinculados</p>
              <p class="text-sm text-gray-600">3. Toca "Vincular un dispositivo" y escanea el código</p>
            </div>
          `;
          
          // Check QR status every 10 seconds
          setTimeout(fetchQRCode, 10000);
        } else {
          qrContainer.innerHTML = `
            <div class="text-center p-8">
              <i class="fas fa-spinner fa-spin text-blue-600 text-4xl mb-4"></i>
              <p class="text-gray-600">Generando código QR...</p>
            </div>
          `;
          setTimeout(fetchQRCode, 2000);
        }
      } catch (error) {
        console.error('Error fetching QR:', error);
      }
    }

    async function disconnectAndReconnect() {
      if (!confirm('¿Estás seguro de que deseas desconectar el WhatsApp actual y vincular uno nuevo?')) {
        return;
      }

      try {
        const response = await fetch('/api/reconnect', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) throw new Error('Failed to reconnect');

        alert('✅ WhatsApp desconectado. Se generará un nuevo código QR. La página se recargará...');
        
        closeQRModal();
        
        setTimeout(() => {
          location.reload();
        }, 2000);

      } catch (error) {
        console.error('Error reconnecting WhatsApp:', error);
        alert('❌ Error al desconectar WhatsApp. Por favor, reinicia el servidor manualmente.');
      }
    }

    // Close modal on outside click - Check if modal exists first
    setTimeout(() => {
      const qrModal = document.getElementById('qr-modal');
      if (qrModal) {
        qrModal.addEventListener('click', (e) => {
          if (e.target.id === 'qr-modal') {
            closeQRModal();
          }
        });
      }
    }, 500);

    // Reconnect WhatsApp function
    async function reconnectWhatsApp() {
      if (!confirm('¿Estás seguro de que deseas desconectar el WhatsApp actual y vincular uno nuevo?')) {
        return;
      }

      try {
        const response = await fetch('/api/reconnect', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) throw new Error('Failed to reconnect');

        // Show success message
        alert('WhatsApp ha sido desconectado. Se generará un nuevo código QR.');
        
        // Close modal
        closeQRModal();
        
        // Reload page after 2 seconds
        setTimeout(() => {
          location.reload();
        }, 2000);

      } catch (error) {
        console.error('Error reconnecting WhatsApp:', error);
        alert('Error al desconectar WhatsApp. Por favor, reinicia el servidor manualmente.');
      }
    }
  </script>

  <!-- QR Modal -->
  <div id="qr-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 relative">
      <div class="p-6 border-b">
        <div class="flex items-center justify-between">
          <h3 class="text-xl font-bold text-gray-800">Vincular WhatsApp</h3>
          <button onclick="closeQRModal()" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
      <div id="qr-code-container" class="p-6 min-h-[400px] flex items-center justify-center">
        <!-- QR Code will be loaded here -->
      </div>
      <div class="p-4 border-t bg-gray-50">
        <div class="flex flex-col space-y-2">
          <button onclick="reconnectWhatsApp()" class="w-full bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition flex items-center justify-center">
            <i class="fas fa-sync-alt mr-2"></i>
            <span>Desconectar y Vincular Nuevo</span>
          </button>
          <p class="text-xs text-gray-500 text-center">Esto cerrará la sesión actual y generará un nuevo código QR</p>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
